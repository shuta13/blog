{
  "title": "罪滅ぼし8月号 ~ Creative Coding(Generative Art) 入門 ~",
  "created_at": "2019-08-30T00:00:00.000Z",
  "tags": [
    "workshop",
    "coding"
  ],
  "category": "develop",
  "bodyContent": "## 👆何やねんこれ?\n\nこの記事は罪滅ぼしとなっております\n\nこんにちは、shuta(did0es) です\n\n何の罪滅ぼしかと言うと、まず僕は<a href=\"http://www.rcc.ritsumei.ac.jp/\" target=\"_blank\">RCC</a>という団体(まあ大学のサークルみたいなもんです)に所属しています。\n\nそこでは「夏期勉強会」という、有志が色々情報系(別に作曲とかイラスト制作みたいな感じで多岐にわたります)のことを夏季休業期間に教えるイベントがあります。普通のコミュニティや社内の勉強会みたいなものです\n\n<br>\n\nんで、僕は今回ゴリゴリ先輩風を吹かせてやろうと思い「Creative Coding(Generative Art)」をテーマにやっていきをしていたのですが、予定管理や人生に失敗しそれどころでは無くなったので罪滅ぼしをしようと記事を書いています、いま\n\n<br>\n\n> Q. この記事はRCC会員向けなんですか？\n\n> A. いいえ　こうやってブログにしているので不特定な読者を想定しています。質問や投石等お気軽にこちらまで → <a href=\"https://twitter.com/did0es\" target=\"_blank\">@did0es</a>\n\n<br>\n\n## 内容の要約\n\nこれは「Creative Coding(Generative Art)」についての僕の考えや全く知らない人が入門するために催す予定だった内容を記事として記しています。\n\nCreative Codingと銘打ちつつも内容はほぼ全部「Generative Art」の話です。Generative Artとは何か全くわからない人向けにちょっとしたワークショップのような形でGenerative Artについてのお話しをします\n\n大きく以下の構成に分けられます\n\n- Generative Artとは何なのか\n\n- 何故僕がGenerative Artに没頭していたのか\n\n- ワークショップ\n\n対象読者は\n　\n- RCCで僕の勉強会に参加登録していた方(本当に申し訳ないです、これで矛をお収め下さい)\n\n- Generative Artに興味があるものの、ぼく/わたしってどうしたらいいですか？ な人\n\n- 多少なりともコード書いたことがある人(プログラミングの初歩さえ分かれば読めます、なぜならそこまでコーディングの話しないので)\n\nです\n\n既にGenerative Artに精通している方からすると退屈な内容になるかもしれません。ざーっと流して何かの暇つぶしにでもどうぞ。マサカリを投げるために準備運動でも良いです、生暖かく見守って下さい。\n\nコーヒーやお茶の用意はできましたか？割とくどくど色々書くつもりなので眠くなったらこれらのものを顔にかけたりしながら読んで下さい。\n## 執筆中\n<!--\n## 本体\n\n### Generative Artとは何なのか\n\nまずは「Generative Art」という言葉でgoogle画像検索をかけてみましょう(作品見たほうが説明はやいので)\n\n> 検索結果：<a href=\"https://www.google.com/search?rlz=1C5CHFA_enJP843JP843&biw=2100&bih=1173&tbm=isch&sa=1&ei=g2VpXam9IYjh-AaN_67QAw&q=Generative+Art&oq=Generative+Art&gs_l=img.3..35i39j0i30l9.1651.4032..4269...0.0..0.79.441.6......0....1..gws-wiz-img.......0i8i30.Y-0sVbcM6to&ved=0ahUKEwjpiurJl6vkAhWIMN4KHY2_CzoQ4dUDCAY&uact=5\" target=\"_blank\">https://www.google.com/search?rlz=1C5CHFA_enJP843JP843&biw=2100&bih=1173&tbm=isch&sa=1&ei=g2VpXam9IYjh-AaN_67QAw&q=Generative+Art&oq=Generative+Art&gs_l=img.3..35i39j0i30l9.1651.4032..4269...0.0..0.79.441.6......0....1..gws-wiz-img.......0i8i30.Y-0sVbcM6to&ved=0ahUKEwjpiurJl6vkAhWIMN4KHY2_CzoQ4dUDCAY&uact=5</a>\n\nズラーッと並んでいますが大体こういう感じのものを想像していただくと良いです。\n\nGenerative Art とはそういった活動で制作された作品や芸術活動自体を指しています。\n\n<br>\n\nなんと言ってもGenerative Artで肝要なのは、\n\n1. コードを書く\n\n2. 予測不可能性\n\n3. 芸術と呼ぶこと\n\n以上の3つだと僕は思っています。\n\n思っています とか言っちゃってるんですが、大体ここでする話は Matt Pearson著の <a href=\"https://www.amazon.co.jp/%E6%99%AE%E5%8F%8A%E7%89%88-%E3%82%B8%E3%82%A7%E3%83%8D%E3%83%A9%E3%83%86%E3%82%A3%E3%83%96%E3%83%BB%E3%82%A2%E3%83%BC%E3%83%88%E2%80%95Processing%E3%81%AB%E3%82%88%E3%82%8B%E5%AE%9F%E8%B7%B5%E3%82%AC%E3%82%A4%E3%83%89-%E3%83%9E%E3%83%83%E3%83%88%E3%83%BB%E3%83%94%E3%82%A2%E3%82%BD%E3%83%B3/dp/4861009634/ref=sr_1_1?__mk_ja_JP=%E3%82%AB%E3%82%BF%E3%82%AB%E3%83%8A&keywords=%E3%83%9E%E3%83%83%E3%83%88%E3%83%94%E3%82%A2%E3%82%BD%E3%83%B3&qid=1567185191&s=gateway&sr=8-1\" target=\"_blank\">ジェネラティブ・アート - Processingによる実践ガイド </a> で言及されているものに影響を受けています。(もし、というかGenerative Artをがっつりやりたいならまずこの本を読むことを勧めます。また色々後述します)\n\n<br>\n\nでは、3つそれぞれの説明に入ります。\n\n1. コードを書く\n\n先程の検索結果のような画像はおそらく、クリエイターが Illustrator や Photoshop などのツールで制作した と思われるかもしれませんが、僕が今話しているGenerative Artはそのようなツールを用いたものではなく **コードを書き、計算機に生成させた作品** のようなものを指しています。\n\nコードを書くことで計算機に処理を行わせることができます。また、計算機は人間の脳ではほとんどできないような回数の繰り返しや複雑な条件分岐を処理することができます。これらを利用してGenerative Artをやっていき することができます。\n> 別にコードを用いないでやるGenerative Artもあるみたいなんですが、僕はやったことないです。ただ アルゴリズムを組む 部分をGUIでやるみたいな感じらしいので大体やってること一緒です、おそらく\n\nただし、計算機は無限回の実行には弱いです。筐体のスペックによってはかなりの計算量を回せたりしますが、流石に無限回実行を行うのは無理です。\n\nGenerative Artはとりあえず無限回繰り返してやろう みたいな感じでやると破滅します、なぜなら計算機でやってるので。\n\nまた、ひたすら繰り返すだけだと面白みがなかったりするので、うまくやっていきをする必要があります(フラクタル構造などを利用する場合は別ですが)\n\nここで `2.` に繋がります\n\n2. 予測不可能性\n\nGenerative Artをする前の最初で最後の忠告なんですが、 **なんでも思い通りになると思わないほうが良い** です。\n\n思い通りに作品を生成できるような猛者は確かにいます(しらんけど)が、最初からそれを求めてやると本当に 無理 という感じになってくるので、やめたほうが良いです。これは色々な先人の方も言っているのでマジです、というかGenerative Artやるとよ〜〜〜〜〜く分かります。\n\nもし思い通りに何か作りたいならデザインツールの使い方を覚える方がよっぽど生産的だし仕事とかにも役立つのでさっさとこんな記事読むのやめてYouTubeでツールの使い方でも見て、自分で好きにやって下さい。\n\n<br>\n\n話戻るんですが、**大体思い通りにならない** ことがGenerative Artの醍醐味だったりします。\n\nは？ という感じになると思うので少し説明を加えますが、こんな コーディングで計算機にただ処理させるプログラムを生成すること を何が芸術したらしめているのかと言えば、\n\n**時々、いい感じの軌跡や模様が生まれてうれしいので満足するまでいっぱいやる**\n\nみたいなざっくりしたアレです。\n\n砕け過ぎな感じがしますが、この ***時々いい感じ*** と ***満足するまでいっぱいやる*** みたいなのが、どうも創作じみてて僕はGenerative Artだなぁみたいな気分になります。\n\n<br>\n\n先程、`1.` で計算機は複雑な処理ができると言いました。つまりそれは人間の予想を外れた結果をもたらします。\n\nただ、やはり繰り返しや条件分岐だけだと味気ないので、適宜 ノイズ や 数式 を利用することになります。\n\nここで使用する ノイズ も 数式 もプログラマー(つまり、Generative Artをするあなたです)が選択でき、なんなら自作することもできます。\n\nこの2つによって、さらにプログラムは予測不可能なものに変わっていくのでかなり興味深い結果を得られるようになります。\n\n興味深い結果を得られるまで、ひたすら改良し、自分の好きな満足するところで止める このような工程が非常に芸術性を持っていると僕は思います。\n\n3. 芸術と呼ぶこと\n\nこれはもうなんかコーディング云々の話でもなんでもないので流しながらで良いです。\n\nこれは上で紹介した ジェネラティブ・アート - Processingによる実践ガイド でも言及されていたのですが、簡単に言うと\n\n「今から私は 自分の行動 を 芸術 とします！」\n\nと言ってしまえば、歯を磨いたりご飯食べたりするようなことでさえもすべて芸術活動となり、ご飯を食べることで発生したゴミは芸術作品と呼べ得ます(←本当に？)(なんかシュールレアリスムの行き着く先みたいで面白いですね)\n\nつまり自分の行っている、そのエディタ上の文字を目を細めてにらめっこする工程を芸術活動だとすることでArtが成立します(多分)。\n\nとにかく自分はこういう感じでArtをしています、いま みたいな感じで後半のワークショップもやっていきましょう。\n\n形や雰囲気から入るのも大事です。Generative Artしてるぞ〜みたいな気持ちでコード書いてると楽しいですよ\n\n---\n\n### 何故僕がGenerative Artに没頭していたのか\n\nワークショップに入る前に、僕がGenerative Artをはじめた話をちょっとだけします。隙あらば自分語りしたい病気なので許して下さい\n\n何回も挙げまくってる <a href=\"https://www.amazon.co.jp/%E6%99%AE%E5%8F%8A%E7%89%88-%E3%82%B8%E3%82%A7%E3%83%8D%E3%83%A9%E3%83%86%E3%82%A3%E3%83%96%E3%83%BB%E3%82%A2%E3%83%BC%E3%83%88%E2%80%95Processing%E3%81%AB%E3%82%88%E3%82%8B%E5%AE%9F%E8%B7%B5%E3%82%AC%E3%82%A4%E3%83%89-%E3%83%9E%E3%83%83%E3%83%88%E3%83%BB%E3%83%94%E3%82%A2%E3%82%BD%E3%83%B3/dp/4861009634/ref=sr_1_1?__mk_ja_JP=%E3%82%AB%E3%82%BF%E3%82%AB%E3%83%8A&keywords=%E3%83%9E%E3%83%83%E3%83%88%E3%83%94%E3%82%A2%E3%82%BD%E3%83%B3&qid=1567185191&s=gateway&sr=8-1\" target=\"_blank\">例のジェネラティブアートの本</a> やその他の本や記事でも度々<a href=\"https://processing.org/\" target=\"_blank\">Processing</a>という言語が使用されています。\n\n僕の通う大学ではプログラミング入門にこの言語が使用されています。\n\nただ、正直なところ授業ではあまり面白みを感じれなかったので、あれこれ調べているうちにProcessingでGenerative Artをやっている人の作品に行き着き、見様見真似で始めました。\n\n情報系に進学したのが、そういう(主に当初は音声でしたが)クリエイティブな活動をPCを使ってやっていきたい という意思だったのでProcessingでのGenerative Artはかなりハマる感じの内容でした。\n\nまた大学入学時点では、てんで素人だった僕でもProcessingは非常に扱いやすくすんなり入門もできたため、かなり :good: でやってました。\n\nこんな感じでGenerative Artに没頭し毎日溶かしていました\n\nまた、作った作品を公開するためにWebフロントやらの技術回りもガジガジ囓り始めました。(最近はもうこればっかりになっていますが)\n\n> こちらは作品を並べたWebサイトです、ちらほらProcessingでのGenerative Art作品があります → <a href=\"https://did0es.me/garelly\" target=\"_blank\">GARELLY</a>\n\nまた、これは僕のGenerative Artの話とはあまり関係ないんですが、最近良く(というか前から) プログラミング初心者は〜をやるべき みたいな ~~不毛な~~ 論争をよく見かけます。僕は結構ProcessingでのGenerative Artを勧めます。(不毛と言いつつも論争に参加していくお気持ち)\n\nなぜなら、ドキュメントや入門記事、入門書が結構充実している(最後らへんに僕が良いなと思った記事や書籍をいくつか紹介します)のと、結果が目に見てわかって楽しいので。あとはProcessing自体Javaという ~~36億のデバイスを汚す~~ かなり有名で実績のある言語をベースに作られているのでいい感じにプログラミングの基礎やそれ以上の内容に手をかけることもできます。\n\n芸術や画像とかの加工に興味がある人には特に楽しくやれると思うので是非この記事を見かけた初心者の方は次のワークショップで一度手を動かしてProcessingを書いてみてください。プログラミング学習の一助になれば幸いです。\n\n既にProcessingを書いたことがある方でも、こういう感じのことができるんだ〜みたいなアレで読んで頂けると嬉しいです。\n\n---\n\n### ワークショップ(執筆中)\n\nここからは やっていき が始まります\n\n今回作るものはこんな感じです\n\n[いい感じの画像1]\n\n[いい感じの画像2]\n\n[いい感じの画像3]\n\n~~正直そこら辺の記事とか本読みあさってできるのだとアレなので、ぐぇぇぇと体内からひねり出してアレをアレしてやっています~~\n\n無からひねり出すのが苦行過ぎたのでGitHubをあれこれ巡って見つけたいい感じの表現を色々インポートしたみたいなアレをやっていきます。(ちゃんと最後に参考のリンク貼ります)\n\n後はコード自体のバグは是非 @did0es に石投げて貰えれば良いんですが、 *ハード関連(特にmacのGPUらへんのバグとか)* は僕に聞かないで下さい、ハード層力(ぢから)が皆無なので\n\nはじめていきます\n\n---\n\nまずはProcessingのインストールからはじめていきます、そんな仰々しいアレじゃないので楽に終わります\n\nWindows/Linux/macOS も大体一緒な感じだと思われます、僕はmacOSを使用しているのでmacを想定して進めていきます\n\nWindows/Linux の方は [こちら]() の記事を参考に進めて下さい(未検証です、すみません でも多分大丈夫)\n\n<br>\n\n1. 　Processing入りzipのダウンロード\n\n<a href=\"https://processing.org/download/\" target=\"_blank\">https://processing.org/download/</a> から os に合ったzipをダウンロードします(macなのでmac用を落としてきます)\n\n2. 起動\n\n落としてきたzipを展開し、中に入っている`Processing`を`アプリケーション`に移動させます\n\nおわり\n\n<br>\n\njava うんぬんのエラーで死んでしまった場合は <a href=\"https://www.oracle.com/java/technologies/javase-jsp-downloads.html\" target=\"_blank\">https://www.oracle.com/java/technologies/javase-jsp-downloads.html</a> からjavaの実行環境諸々インストーラを取ってきて自分で頑張ってください　応援しています\n\nそれでもなお、なんやこいつ動かんやんけ！クソが！！！！！！みたい感じになっていたらPCを叩く前に <a href=\"https://twitter.com/did0es\" target=\"_blank\">@did0es</a> まで連絡をば\n\n---\n\nではざっくりProcessingについての文法をやっていきます\n\nこれまでに何か他の言語(手続き型とか)を書いたことある方であればそう難しいものではない というか多分簡単な部類に入ると思います\n\n最初に`型`のお話しです。コードを書く際に以下のような`変数`を宣言し、使用できます\n\nこれは勝手で申し訳という感じなんですが、そんなに(僕が)使わない型は省いています(全部見たい人は [公式リファレンス](https://processing.org/reference/) 見てください、英語ですが )\n\n```processing\n// 数値を扱う\nint numInt = 1;\nfloat numFloat = 0.05;\n\n// 文字を扱う\nchar chr = \"a\";\nString str = \"元気笑顔出社\";\n\n// 配列\nint[] intArray = { 1, 10, 100, 1000 };\nfloat[] floatArray = { 0.1, 0.02, 0.03, 0.04 };\nchar chr[] = \"おうちかえりたい\"; // String型とほぼ同じと思って貰っていいです\n\n// 色を扱う\ncolor rgb = color(255, 255, 255);\ncolor colorCode = #FFFFFF;\n```\nまあこれだけあればとりあえず困らないです、`color`型があるのがちょっと一見変わっています。\n\n`=`を使用すると宣言した変数に、変数の型と同じ型のデータを代入することができます。\n\n宣言した変数に初めてデータを入れることを`初期化`と呼びます。\n\n<br>\n\n次にProcessingのローカルルールみたいなものの説明をします。\n\nこう書いたらこう動くみたいなのを並べていきます\n\n```processing\n// 初期化用関数\nvoid setup() {\n    // 800*800のキャンバスの表示\n    size(800, 800);\n    // 背景色の設定\n    background(0, 0, 0);\n}\n\n// Main関数(Loop)\nvoid draw() {\n    // 白で塗りつぶす\n    fill(255, 255, 255);\n    // 中心に大きさ10の円を描画\n    ellipse(width / 2, height / 2, 10, 10);\n}\n\n// キーボード入力がトリガーで実行される関数\nvoid keyPressed() {\n    // 何かしらの処理\n}\n```\n\nこの2つが主要な関数です。`setup()` はコードを実行した際に`初めに一度だけ`呼び出される関数です\n\nそのため`setup()`には初期化の処理やキャンバス(絵を描画するところ)を表示する処理を記述します。\n\n`draw()` は実行すると無限ループで中の処理が呼び出されます。\n\nこれを利用して簡単にアニメーションを実装していくことができます\n\nループが煩わしいのであれば`setup()`の内部に `noLoop()` を記述することでループを止められ、一回だけ実行に変更できます。\n\nまた `noLoop()` を書くと実行するたびに ウインドウ閉じてまた実行してウインドウ閉じて... みたいな不毛をする羽目になるので `keyPressed()` の内部に以下のような記述をすると任意の入力に応じて `draw()` を再度呼び出すことができます\n\n```processing\n// 初期化用関数\nvoid setup() {\n    // 800*800のキャンバスの表示\n    size(800, 800);\n    // 背景色の設定\n    background(0, 0, 0);\n}\n\n// Main関数(Loop)\nvoid draw() {\n    // 白で塗りつぶす\n    fill(255, 255, 255);\n    // 中心に大きさ10の円を描画\n    ellipse(width / 2, height / 2, 10, 10);\n}\n\n// キーボード入力がトリガーで実行される関数\nvoid keyPressed() {\n    // これなんか書いておいて\n}\n```\n-->",
  "bodyHtml": "<h2>👆何やねんこれ?</h2>\n<p>この記事は罪滅ぼしとなっております</p>\n<p>こんにちは、shuta(did0es) です</p>\n<p>何の罪滅ぼしかと言うと、まず僕は<a href=\"http://www.rcc.ritsumei.ac.jp/\" target=\"_blank\">RCC</a>という団体(まあ大学のサークルみたいなもんです)に所属しています。</p>\n<p>そこでは「夏期勉強会」という、有志が色々情報系(別に作曲とかイラスト制作みたいな感じで多岐にわたります)のことを夏季休業期間に教えるイベントがあります。普通のコミュニティや社内の勉強会みたいなものです</p>\n<br>\n<p>んで、僕は今回ゴリゴリ先輩風を吹かせてやろうと思い「Creative Coding(Generative Art)」をテーマにやっていきをしていたのですが、予定管理や人生に失敗しそれどころでは無くなったので罪滅ぼしをしようと記事を書いています、いま</p>\n<br>\n<blockquote>\n<p>Q. この記事はRCC会員向けなんですか？</p>\n</blockquote>\n<blockquote>\n<p>A. いいえ　こうやってブログにしているので不特定な読者を想定しています。質問や投石等お気軽にこちらまで → <a href=\"https://twitter.com/did0es\" target=\"_blank\">@did0es</a></p>\n</blockquote>\n<br>\n<h2>内容の要約</h2>\n<p>これは「Creative Coding(Generative Art)」についての僕の考えや全く知らない人が入門するために催す予定だった内容を記事として記しています。</p>\n<p>Creative Codingと銘打ちつつも内容はほぼ全部「Generative Art」の話です。Generative Artとは何か全くわからない人向けにちょっとしたワークショップのような形でGenerative Artについてのお話しをします</p>\n<p>大きく以下の構成に分けられます</p>\n<ul>\n<li>\n<p>Generative Artとは何なのか</p>\n</li>\n<li>\n<p>何故僕がGenerative Artに没頭していたのか</p>\n</li>\n<li>\n<p>ワークショップ</p>\n</li>\n</ul>\n<p>対象読者は</p>\n<ul>\n<li>\n<p>RCCで僕の勉強会に参加登録していた方(本当に申し訳ないです、これで矛をお収め下さい)</p>\n</li>\n<li>\n<p>Generative Artに興味があるものの、ぼく/わたしってどうしたらいいですか？ な人</p>\n</li>\n<li>\n<p>多少なりともコード書いたことがある人(プログラミングの初歩さえ分かれば読めます、なぜならそこまでコーディングの話しないので)</p>\n</li>\n</ul>\n<p>です</p>\n<p>既にGenerative Artに精通している方からすると退屈な内容になるかもしれません。ざーっと流して何かの暇つぶしにでもどうぞ。マサカリを投げるために準備運動でも良いです、生暖かく見守って下さい。</p>\n<p>コーヒーやお茶の用意はできましたか？割とくどくど色々書くつもりなので眠くなったらこれらのものを顔にかけたりしながら読んで下さい。</p>\n<h2>執筆中</h2>\n<!--\n## 本体\n\n### Generative Artとは何なのか\n\nまずは「Generative Art」という言葉でgoogle画像検索をかけてみましょう(作品見たほうが説明はやいので)\n\n> 検索結果：<a href=\"https://www.google.com/search?rlz=1C5CHFA_enJP843JP843&biw=2100&bih=1173&tbm=isch&sa=1&ei=g2VpXam9IYjh-AaN_67QAw&q=Generative+Art&oq=Generative+Art&gs_l=img.3..35i39j0i30l9.1651.4032..4269...0.0..0.79.441.6......0....1..gws-wiz-img.......0i8i30.Y-0sVbcM6to&ved=0ahUKEwjpiurJl6vkAhWIMN4KHY2_CzoQ4dUDCAY&uact=5\" target=\"_blank\">https://www.google.com/search?rlz=1C5CHFA_enJP843JP843&biw=2100&bih=1173&tbm=isch&sa=1&ei=g2VpXam9IYjh-AaN_67QAw&q=Generative+Art&oq=Generative+Art&gs_l=img.3..35i39j0i30l9.1651.4032..4269...0.0..0.79.441.6......0....1..gws-wiz-img.......0i8i30.Y-0sVbcM6to&ved=0ahUKEwjpiurJl6vkAhWIMN4KHY2_CzoQ4dUDCAY&uact=5</a>\n\nズラーッと並んでいますが大体こういう感じのものを想像していただくと良いです。\n\nGenerative Art とはそういった活動で制作された作品や芸術活動自体を指しています。\n\n<br>\n\nなんと言ってもGenerative Artで肝要なのは、\n\n1. コードを書く\n\n2. 予測不可能性\n\n3. 芸術と呼ぶこと\n\n以上の3つだと僕は思っています。\n\n思っています とか言っちゃってるんですが、大体ここでする話は Matt Pearson著の <a href=\"https://www.amazon.co.jp/%E6%99%AE%E5%8F%8A%E7%89%88-%E3%82%B8%E3%82%A7%E3%83%8D%E3%83%A9%E3%83%86%E3%82%A3%E3%83%96%E3%83%BB%E3%82%A2%E3%83%BC%E3%83%88%E2%80%95Processing%E3%81%AB%E3%82%88%E3%82%8B%E5%AE%9F%E8%B7%B5%E3%82%AC%E3%82%A4%E3%83%89-%E3%83%9E%E3%83%83%E3%83%88%E3%83%BB%E3%83%94%E3%82%A2%E3%82%BD%E3%83%B3/dp/4861009634/ref=sr_1_1?__mk_ja_JP=%E3%82%AB%E3%82%BF%E3%82%AB%E3%83%8A&keywords=%E3%83%9E%E3%83%83%E3%83%88%E3%83%94%E3%82%A2%E3%82%BD%E3%83%B3&qid=1567185191&s=gateway&sr=8-1\" target=\"_blank\">ジェネラティブ・アート - Processingによる実践ガイド </a> で言及されているものに影響を受けています。(もし、というかGenerative Artをがっつりやりたいならまずこの本を読むことを勧めます。また色々後述します)\n\n<br>\n\nでは、3つそれぞれの説明に入ります。\n\n1. コードを書く\n\n先程の検索結果のような画像はおそらく、クリエイターが Illustrator や Photoshop などのツールで制作した と思われるかもしれませんが、僕が今話しているGenerative Artはそのようなツールを用いたものではなく **コードを書き、計算機に生成させた作品** のようなものを指しています。\n\nコードを書くことで計算機に処理を行わせることができます。また、計算機は人間の脳ではほとんどできないような回数の繰り返しや複雑な条件分岐を処理することができます。これらを利用してGenerative Artをやっていき することができます。\n> 別にコードを用いないでやるGenerative Artもあるみたいなんですが、僕はやったことないです。ただ アルゴリズムを組む 部分をGUIでやるみたいな感じらしいので大体やってること一緒です、おそらく\n\nただし、計算機は無限回の実行には弱いです。筐体のスペックによってはかなりの計算量を回せたりしますが、流石に無限回実行を行うのは無理です。\n\nGenerative Artはとりあえず無限回繰り返してやろう みたいな感じでやると破滅します、なぜなら計算機でやってるので。\n\nまた、ひたすら繰り返すだけだと面白みがなかったりするので、うまくやっていきをする必要があります(フラクタル構造などを利用する場合は別ですが)\n\nここで `2.` に繋がります\n\n2. 予測不可能性\n\nGenerative Artをする前の最初で最後の忠告なんですが、 **なんでも思い通りになると思わないほうが良い** です。\n\n思い通りに作品を生成できるような猛者は確かにいます(しらんけど)が、最初からそれを求めてやると本当に 無理 という感じになってくるので、やめたほうが良いです。これは色々な先人の方も言っているのでマジです、というかGenerative Artやるとよ〜〜〜〜〜く分かります。\n\nもし思い通りに何か作りたいならデザインツールの使い方を覚える方がよっぽど生産的だし仕事とかにも役立つのでさっさとこんな記事読むのやめてYouTubeでツールの使い方でも見て、自分で好きにやって下さい。\n\n<br>\n\n話戻るんですが、**大体思い通りにならない** ことがGenerative Artの醍醐味だったりします。\n\nは？ という感じになると思うので少し説明を加えますが、こんな コーディングで計算機にただ処理させるプログラムを生成すること を何が芸術したらしめているのかと言えば、\n\n**時々、いい感じの軌跡や模様が生まれてうれしいので満足するまでいっぱいやる**\n\nみたいなざっくりしたアレです。\n\n砕け過ぎな感じがしますが、この ***時々いい感じ*** と ***満足するまでいっぱいやる*** みたいなのが、どうも創作じみてて僕はGenerative Artだなぁみたいな気分になります。\n\n<br>\n\n先程、`1.` で計算機は複雑な処理ができると言いました。つまりそれは人間の予想を外れた結果をもたらします。\n\nただ、やはり繰り返しや条件分岐だけだと味気ないので、適宜 ノイズ や 数式 を利用することになります。\n\nここで使用する ノイズ も 数式 もプログラマー(つまり、Generative Artをするあなたです)が選択でき、なんなら自作することもできます。\n\nこの2つによって、さらにプログラムは予測不可能なものに変わっていくのでかなり興味深い結果を得られるようになります。\n\n興味深い結果を得られるまで、ひたすら改良し、自分の好きな満足するところで止める このような工程が非常に芸術性を持っていると僕は思います。\n\n3. 芸術と呼ぶこと\n\nこれはもうなんかコーディング云々の話でもなんでもないので流しながらで良いです。\n\nこれは上で紹介した ジェネラティブ・アート - Processingによる実践ガイド でも言及されていたのですが、簡単に言うと\n\n「今から私は 自分の行動 を 芸術 とします！」\n\nと言ってしまえば、歯を磨いたりご飯食べたりするようなことでさえもすべて芸術活動となり、ご飯を食べることで発生したゴミは芸術作品と呼べ得ます(←本当に？)(なんかシュールレアリスムの行き着く先みたいで面白いですね)\n\nつまり自分の行っている、そのエディタ上の文字を目を細めてにらめっこする工程を芸術活動だとすることでArtが成立します(多分)。\n\nとにかく自分はこういう感じでArtをしています、いま みたいな感じで後半のワークショップもやっていきましょう。\n\n形や雰囲気から入るのも大事です。Generative Artしてるぞ〜みたいな気持ちでコード書いてると楽しいですよ\n\n---\n\n### 何故僕がGenerative Artに没頭していたのか\n\nワークショップに入る前に、僕がGenerative Artをはじめた話をちょっとだけします。隙あらば自分語りしたい病気なので許して下さい\n\n何回も挙げまくってる <a href=\"https://www.amazon.co.jp/%E6%99%AE%E5%8F%8A%E7%89%88-%E3%82%B8%E3%82%A7%E3%83%8D%E3%83%A9%E3%83%86%E3%82%A3%E3%83%96%E3%83%BB%E3%82%A2%E3%83%BC%E3%83%88%E2%80%95Processing%E3%81%AB%E3%82%88%E3%82%8B%E5%AE%9F%E8%B7%B5%E3%82%AC%E3%82%A4%E3%83%89-%E3%83%9E%E3%83%83%E3%83%88%E3%83%BB%E3%83%94%E3%82%A2%E3%82%BD%E3%83%B3/dp/4861009634/ref=sr_1_1?__mk_ja_JP=%E3%82%AB%E3%82%BF%E3%82%AB%E3%83%8A&keywords=%E3%83%9E%E3%83%83%E3%83%88%E3%83%94%E3%82%A2%E3%82%BD%E3%83%B3&qid=1567185191&s=gateway&sr=8-1\" target=\"_blank\">例のジェネラティブアートの本</a> やその他の本や記事でも度々<a href=\"https://processing.org/\" target=\"_blank\">Processing</a>という言語が使用されています。\n\n僕の通う大学ではプログラミング入門にこの言語が使用されています。\n\nただ、正直なところ授業ではあまり面白みを感じれなかったので、あれこれ調べているうちにProcessingでGenerative Artをやっている人の作品に行き着き、見様見真似で始めました。\n\n情報系に進学したのが、そういう(主に当初は音声でしたが)クリエイティブな活動をPCを使ってやっていきたい という意思だったのでProcessingでのGenerative Artはかなりハマる感じの内容でした。\n\nまた大学入学時点では、てんで素人だった僕でもProcessingは非常に扱いやすくすんなり入門もできたため、かなり :good: でやってました。\n\nこんな感じでGenerative Artに没頭し毎日溶かしていました\n\nまた、作った作品を公開するためにWebフロントやらの技術回りもガジガジ囓り始めました。(最近はもうこればっかりになっていますが)\n\n> こちらは作品を並べたWebサイトです、ちらほらProcessingでのGenerative Art作品があります → <a href=\"https://did0es.me/garelly\" target=\"_blank\">GARELLY</a>\n\nまた、これは僕のGenerative Artの話とはあまり関係ないんですが、最近良く(というか前から) プログラミング初心者は〜をやるべき みたいな ~~不毛な~~ 論争をよく見かけます。僕は結構ProcessingでのGenerative Artを勧めます。(不毛と言いつつも論争に参加していくお気持ち)\n\nなぜなら、ドキュメントや入門記事、入門書が結構充実している(最後らへんに僕が良いなと思った記事や書籍をいくつか紹介します)のと、結果が目に見てわかって楽しいので。あとはProcessing自体Javaという ~~36億のデバイスを汚す~~ かなり有名で実績のある言語をベースに作られているのでいい感じにプログラミングの基礎やそれ以上の内容に手をかけることもできます。\n\n芸術や画像とかの加工に興味がある人には特に楽しくやれると思うので是非この記事を見かけた初心者の方は次のワークショップで一度手を動かしてProcessingを書いてみてください。プログラミング学習の一助になれば幸いです。\n\n既にProcessingを書いたことがある方でも、こういう感じのことができるんだ〜みたいなアレで読んで頂けると嬉しいです。\n\n---\n\n### ワークショップ(執筆中)\n\nここからは やっていき が始まります\n\n今回作るものはこんな感じです\n\n[いい感じの画像1]\n\n[いい感じの画像2]\n\n[いい感じの画像3]\n\n~~正直そこら辺の記事とか本読みあさってできるのだとアレなので、ぐぇぇぇと体内からひねり出してアレをアレしてやっています~~\n\n無からひねり出すのが苦行過ぎたのでGitHubをあれこれ巡って見つけたいい感じの表現を色々インポートしたみたいなアレをやっていきます。(ちゃんと最後に参考のリンク貼ります)\n\n後はコード自体のバグは是非 @did0es に石投げて貰えれば良いんですが、 *ハード関連(特にmacのGPUらへんのバグとか)* は僕に聞かないで下さい、ハード層力(ぢから)が皆無なので\n\nはじめていきます\n\n---\n\nまずはProcessingのインストールからはじめていきます、そんな仰々しいアレじゃないので楽に終わります\n\nWindows/Linux/macOS も大体一緒な感じだと思われます、僕はmacOSを使用しているのでmacを想定して進めていきます\n\nWindows/Linux の方は [こちら]() の記事を参考に進めて下さい(未検証です、すみません でも多分大丈夫)\n\n<br>\n\n1. 　Processing入りzipのダウンロード\n\n<a href=\"https://processing.org/download/\" target=\"_blank\">https://processing.org/download/</a> から os に合ったzipをダウンロードします(macなのでmac用を落としてきます)\n\n2. 起動\n\n落としてきたzipを展開し、中に入っている`Processing`を`アプリケーション`に移動させます\n\nおわり\n\n<br>\n\njava うんぬんのエラーで死んでしまった場合は <a href=\"https://www.oracle.com/java/technologies/javase-jsp-downloads.html\" target=\"_blank\">https://www.oracle.com/java/technologies/javase-jsp-downloads.html</a> からjavaの実行環境諸々インストーラを取ってきて自分で頑張ってください　応援しています\n\nそれでもなお、なんやこいつ動かんやんけ！クソが！！！！！！みたい感じになっていたらPCを叩く前に <a href=\"https://twitter.com/did0es\" target=\"_blank\">@did0es</a> まで連絡をば\n\n---\n\nではざっくりProcessingについての文法をやっていきます\n\nこれまでに何か他の言語(手続き型とか)を書いたことある方であればそう難しいものではない というか多分簡単な部類に入ると思います\n\n最初に`型`のお話しです。コードを書く際に以下のような`変数`を宣言し、使用できます\n\nこれは勝手で申し訳という感じなんですが、そんなに(僕が)使わない型は省いています(全部見たい人は [公式リファレンス](https://processing.org/reference/) 見てください、英語ですが )\n\n```processing\n// 数値を扱う\nint numInt = 1;\nfloat numFloat = 0.05;\n\n// 文字を扱う\nchar chr = \"a\";\nString str = \"元気笑顔出社\";\n\n// 配列\nint[] intArray = { 1, 10, 100, 1000 };\nfloat[] floatArray = { 0.1, 0.02, 0.03, 0.04 };\nchar chr[] = \"おうちかえりたい\"; // String型とほぼ同じと思って貰っていいです\n\n// 色を扱う\ncolor rgb = color(255, 255, 255);\ncolor colorCode = #FFFFFF;\n```\nまあこれだけあればとりあえず困らないです、`color`型があるのがちょっと一見変わっています。\n\n`=`を使用すると宣言した変数に、変数の型と同じ型のデータを代入することができます。\n\n宣言した変数に初めてデータを入れることを`初期化`と呼びます。\n\n<br>\n\n次にProcessingのローカルルールみたいなものの説明をします。\n\nこう書いたらこう動くみたいなのを並べていきます\n\n```processing\n// 初期化用関数\nvoid setup() {\n    // 800*800のキャンバスの表示\n    size(800, 800);\n    // 背景色の設定\n    background(0, 0, 0);\n}\n\n// Main関数(Loop)\nvoid draw() {\n    // 白で塗りつぶす\n    fill(255, 255, 255);\n    // 中心に大きさ10の円を描画\n    ellipse(width / 2, height / 2, 10, 10);\n}\n\n// キーボード入力がトリガーで実行される関数\nvoid keyPressed() {\n    // 何かしらの処理\n}\n```\n\nこの2つが主要な関数です。`setup()` はコードを実行した際に`初めに一度だけ`呼び出される関数です\n\nそのため`setup()`には初期化の処理やキャンバス(絵を描画するところ)を表示する処理を記述します。\n\n`draw()` は実行すると無限ループで中の処理が呼び出されます。\n\nこれを利用して簡単にアニメーションを実装していくことができます\n\nループが煩わしいのであれば`setup()`の内部に `noLoop()` を記述することでループを止められ、一回だけ実行に変更できます。\n\nまた `noLoop()` を書くと実行するたびに ウインドウ閉じてまた実行してウインドウ閉じて... みたいな不毛をする羽目になるので `keyPressed()` の内部に以下のような記述をすると任意の入力に応じて `draw()` を再度呼び出すことができます\n\n```processing\n// 初期化用関数\nvoid setup() {\n    // 800*800のキャンバスの表示\n    size(800, 800);\n    // 背景色の設定\n    background(0, 0, 0);\n}\n\n// Main関数(Loop)\nvoid draw() {\n    // 白で塗りつぶす\n    fill(255, 255, 255);\n    // 中心に大きさ10の円を描画\n    ellipse(width / 2, height / 2, 10, 10);\n}\n\n// キーボード入力がトリガーで実行される関数\nvoid keyPressed() {\n    // これなんか書いておいて\n}\n```\n-->",
  "dir": "src/contents/json",
  "base": "2019-08-30-creative-coding-guilt.json",
  "ext": ".json",
  "sourceBase": "2019-08-30-creative-coding-guilt.md",
  "sourceExt": ".md"
}